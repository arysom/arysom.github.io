{"data":{"markdownRemark":{"html":"<p>Jako generatora dla tego bloga użyłem Sculpin. Dlaczego? Ponieważ lubię PHP, bo proste rzeczy mnie cieszą, bo chcę pisać. W zasadzie każdym narzędziem można pisać. Ba, nawet długopisem, ale dziś Sculpinem.</p>\n<p>Po przejrzeniu dokumentacji każdy, kto miał do czynienia z composerem będzie w stanie wystartować bloga w minutę.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/sculpin/sculpin-blog-skeleton.git myblog\n<span class=\"token function\">cd</span> myblog\ncomposer <span class=\"token function\">install</span></code></pre></div>\n<p>Ale tak naprawdę chcemy publikować na github pages i publikować beztrosko. Załóżmy zatem repozytorium o nazwie naszego użytkownika github. Jeśli jesteś github.com/raul to zakładaj raul.github.io . Jest to wariant, w którym zakładamy github page dla naszego użytkownika. Pozostałe warianty to publikacja strony dla projektu, pod innym adresem, oraz publikacja z katalogu docs. Tym razem chodzi nam o publikację bloga dla użytkownika.</p>\n<p>Moja propozycja wygląda następująco: robimy dwie gałęzie, np. master i sources. W master trzymajmy to, co wygenerowane, a w sources nasze źródło, jak sama nazwa wskazuje. W tym celu do pliku publish.sh wklejamy następujący kod:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> $<span class=\"token comment\"># -ne 1 ]; then</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string\">\"usage: ./publish.sh \\\"commit message\\\"\"</span>\n    <span class=\"token keyword\">exit</span> 1<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">fi</span>\n\nvendor/bin/sculpin generate --env<span class=\"token operator\">=</span>prod\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$?</span> -ne 0 <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span> <span class=\"token keyword\">echo</span> <span class=\"token string\">\"Could not generate the site\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">exit</span> 1<span class=\"token punctuation\">;</span> <span class=\"token keyword\">fi</span>\n\n<span class=\"token function\">git</span> add -f output_prod <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">git</span> commit -m <span class=\"token string\">\"<span class=\"token variable\">$1</span>\"</span>\n<span class=\"token function\">git</span> subtree push --prefix output_prod origin master</code></pre></div>\n<p>Pokrótce: wpisujemy w terminalu <code class=\"language-text\">./publish.sh &quot;mój mesydż&quot;</code> i nasz katalog <code class=\"language-text\">output_prod</code> zostanie wysłany do gałęzi master, co poskutkuje opublikowaniem strony pod adresem <code class=\"language-text\">&lt;NASZ_USER&gt;.github.io</code></p>\n<p>Blog gotowy!</p>\n<p>Co jeszcze chciałbym dodać? W Sculpinie jest parę rzeczy do poprawienia, skrypty js wczytywane przez composera (to dopiero można by rzec frontendowy beton), przemyślany deploy dla różnych serwisów, wreszcie jakiś katalog skórek do wyboru. Ale z drugiej strony im mniej funkcji, tym lepiej, a zestaw narzędzi php sprawia, że czuję się jak na biwaku z wielofunkcyjnym scyzorykiem. I co najważniejsze, mogę wreszcie coś napisać.</p>","fields":{"slug":"/hello-github/","date":"2018-06-10"},"frontmatter":{"title":"Github Pages na Sculpin"}}},"pageContext":{"singlePost":true}}