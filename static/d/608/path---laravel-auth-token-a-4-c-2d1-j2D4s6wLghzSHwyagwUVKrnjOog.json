{"data":{"markdownRemark":{"html":"<p>Tytuł brzmi jakby z kosmosu, ale sprawy mają się w gruncie rzeczy prosto. Nie będziemy tutaj tworzyć aplikacji typu SPA(single page app), a jedynie doświadczymy lekkiego flirtu z frontendowymi komponentami Vue.js.</p>\n<h2>Middleware auth:api</h2>\n<p>Być może zastanawiałeś się, jak działa middleware, którego wyraźne istnienie jest zaznaczone w pliku z routami api(routes/api.php)?</p>\n<p>Jest to prosta autentykacja Twojego api za pomocą tokena, jest włączona domyślnie w pliku config/auth.php. Ale jak to działa? Otóż nie działa. Najpierw trzeba wykonać kilka kroków.</p>\n<h2>Potrzebne do skorzystania z autentykacji tokenem</h2>\n<ol>\n<li>Dodanie kolumny <code>api_token</code> do tabeli <code>users</code> - powiedzmy <code>VARCHAR(60)</code>.</li>\n<li>Uzupełnienie modelu o dane pola <code>api_token</code>, robimy go fillable, ale też hidden.</li>\n<li>Uzupełnienie kontrolera rejestracji użytkownika o funkcję generującą token np.: <code>str_random(60)</code></li>\n<li>Wyświetlenie naszego tokenu wewnątrz layoutu. Np. poprzez dodanie skryptu na dole strony:</li>\n</ol>\n<pre><code class=\"language-javascript\">&#x3C;script>\n    window.Laravel = {!! json_encode([\n        'apiToken' => auth()->user()->api_token ?? null,\n    ]) !!};\n&#x3C;/script>\n</code></pre>\n<p>I jak do tej pory gotowe. Jeśli Twoja aplikacja skorzystała z generowanego systemu autentykacji (<code>php artisan make:auth</code>), to po zalogowaniu się, w ciele strony zobaczysz token. Skopiuj jego zawartość i zobacz, że autoryzacja token naprawdę działa. Skorzystaj właśnie z przykładowego routa <code>/api/user?api_token=XXXXXX</code>. Przy braku tokena nastąpi przekierowanie do home, a jeśli token jest poprawny - zobaczysz dane użytkownika. Dobra, ale co dalej? Przecież nie będziesz doklejał ciągu znaków do każdego urla w aplikacji? Gdzie w tym wszystkim korzyści?</p>\n<h2>Komponenty Vue.js</h2>\n<p>Dawno temu twórcy Laravela wybrali Vue.js jako podstawową bibliotekę, dzięki której interfejsy aplikacji tworzonych za pomocą Laravela o nowoczesne komponenty (jakkolwiek by to nie brzmiało). W repozytorium frameworka (5.6 - przypadek redakcji), w katalogu <code>resources/assets/js</code> znajdziesz przygotowany przykład użycia tej właśnie biblioteki z przykładowym komponentem. Dodatkowo jest jeszcze kilka innych bibliotek,w tym axios, odpowiedzialny właśnie za połączenie z API.\nVue.js jest w miarę łatwo przyswajalnym frameworkiem i po paru drobnych potyczkach z dokumentacją, będziesz w stanie stworzyć właśnie taki własny komponent, który wkleisz do aplikacji. Ale co przyjdzie z samego komponentu? Może jakieś drobne modyfikacje DOM, ciekawsze inputy. Jednak prawdziwą solą ziemi internetu jest stworzenie komponentu, który będzie zarządzał danymi pobieranymi z API, a te warto zabezpieczyć. Bo co innego połączyć się z API wewnątrz aplikacji, w której jesteś\nzalogowany, a co innego wpisać adres, z którego pobierasz dane i zobaczyć je poza kontekstem aplikacji. To dziura w bezpieczeństwie. Dodajmy zatem autentykację laravelową wewnątrz naszego komponentu.</p>\n<h2>Token wewnątrz aplikacji Vue-Laravel</h2>\n<p>W katalogu <code>resources/assets/js</code> znajdź plik bootstrap.js i tam w miejscu, gdzie konfigurujemy axios, dodajemy nasz dodatkowy header, który będzie odpowiedzialny za autentykację zapytań.</p>\n<pre><code>window.axios.defaults.headers.common['Authorization'] = 'Bearer ' + Laravel.apiToken;\n</code></pre>\n<p>Dzięki temu, że wcześniej dodałeś klucz token wewnątrz layoutu i przypiąłeś go do globalnego obiektu <code>Laravel</code> - mamy do niego dostęp i używamy go w autentykacji. Teraz już nie musisz dodawać parametru get przy każdym zapytaniu. Żeby komponent zbudował się na nowo wpisz w terminalu komendę: <code>npm run dev|watch|prod</code>.</p>\n<p>Na zakończenie jeszcze przykładowy komponent vue.js, który łączy się z naszym api.</p>\n<pre><code class=\"language-html\">&#x3C;template>\n    &#x3C;div class=\"container\">\n        &#x3C;div class=\"row justify-content-center\">\n            Grupy\n            ...tutaj instrukcje typu v-for...\n        &#x3C;/div>\n    &#x3C;/div>\n&#x3C;/template>\n\n&#x3C;script>\n    export default {\n        created() {\n            console.log('created')\n            this.getGroups()\n        },\n    methods: {\n        getGroups() {\n            axios.get('http://localhost:8000/api/groups')\n                .then(response => {console.log('wynik',response)})\n                .catch(error => {console.log(('err', error))})\n        }\n    }\n}\n&#x3C;/script>\n\n\nI to w zasadzie wszystko. Komponent łączy się z api, połączenie jest zabezpieczone. Dodatkowym gratisem od twórców Laravela jest `login throttle`. Czyli ograniczenie ilości requestów na minutę. Jeśli zajrzysz w nagłówki odpowiedzi z serwera - przy zapytaniach do api zobaczysz dwie dodatkowe wartośći: \n</code></pre>\n<p>X-RateLimit-Limit: 60\nX-RateLimit-Remaining: 58</p>\n<pre><code>Przy zbyt dużej ilości zapytań do api, serwer zwróci błąd 429 i na następne zapytnie trzeba będzie czekać kolejną minutę.\n\nBezpieczeństwo to kamień węgielny Twojej aplikacji.\n</code></pre>","fields":{"slug":"/laravel-auth-token/","date":"2018-07-24"},"frontmatter":{"title":"Autoryzacja komponentu Vue.js w aplikacji monolitycznej Laravel"}}},"pageContext":{}}