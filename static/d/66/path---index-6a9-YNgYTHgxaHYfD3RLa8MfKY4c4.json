{"data":{"allMarkdownRemark":{"edges":[{"node":{"excerpt":"Tytuł brzmi jakby z kosmosu, ale sprawy mają się w gruncie rzeczy prosto. Nie będziemy tutaj tworzyć aplikacji typu SPA(single page app), a jedynie doświadczymy lekkiego flirtu z frontendowymi komponentami Vue.js. Middleware auth:api Być może zastanawiałeś się, jak działa middleware, którego wyraźne istnienie jest zaznaczone w pliku z routami api(routes/api.php)? Jest to prosta autentykacja Twojego api za pomocą tokena, jest włączona domyślnie w pliku config/auth.php. Ale jak to działa? Otóż nie działa. Najpierw trzeba wykonać kilka kroków. Potrzebne do skorzystania z autentykacji tokenem Dodanie kolumny  api_token  do tabeli  users  - powiedzmy  VARCHAR(60) . Uzupełnienie modelu o dane pola  api_token , robimy go fillable, ale też hidden. Uzupełnienie kontrolera rejestracji użytkownika o funkcję generującą token np.:  str_random(60) Wyświetlenie naszego tokenu wewnątrz layoutu. Np. poprzez dodanie skryptu na dole strony: I jak do tej pory gotowe. Jeśli Twoja aplikacja skorzystała z generowanego systemu autentykacji ( php artisan make:auth ), to po zalogowaniu się, w ciele strony zobaczysz token. Skopiuj jego zawartość i zobacz, że autoryzacja token naprawdę działa. Skorzystaj właśnie z przykładowego routa  /api/user?api_token…","id":"8a5ed797-0b70-5c31-a769-e47b83ee95ac","fields":{"date":"2018-07-24","slug":"/laravel-auth-token/"},"frontmatter":{"title":"Autoryzacja komponentu Vue.js w aplikacji monolitycznej Laravel","tags":["laravel","vuejs"],"categories":["php"]}}},{"node":{"excerpt":"Ten wpis dotyczył będzie laravela, ale użyte w nim stwierdzenia mają swoje odniesienie do całego środowiska php. Laravel posłuży tutaj jako przykład zastosowania a sposób w jaki proponuję ustawić środowisko developerskie jest jedną z propozycji. Jeśli chodzi o uruchamianie projektów php w celu lokalnej developerki dawniej korzystaliśmy z programów typu xampp, uczyliśmy się obsługi serwera apache na linuxie, zamartwialiśmy się o zawartość pliku etc/hosts gdzieś w systemie. Na szczęście te czasy odchodzą w niepamięć. Docker Mamy Dockera. Z czym to się je, co to jest? Najprościej mówiąc jest to zamknięte, wirtualne środowisko, jak się potocznie mówi: kontener. Nie ważne jak skonfigurowany jest Twój system, jaką masz wersję PHP, Node, Ruby - kontener ma swoją niezależną rzeczywistość.  Dokumentacja dockera  jest bogata w szczegóły, kontenery łączy się w grupy, trzeba zadbać o \"data persistence\", bo przy każdym zatrzymaniu kontenera, wraca on do swojej poprzedniej postaci. Prawda, że na razie brzmi to skomplikowanie? Docker Compose Na szczęście twórcy dockera wymyślili narzędzie  docker-compose , jest ono dołączone do dockera i cała jego zaleta polega na tym, że konfigurację wielu kontenerów trzyma się w jednym pliku. Wystarczy  docker…","id":"40022808-0b3b-5234-a3f0-021242bb5415","fields":{"date":"2018-07-19","slug":"/docker-compose-laravel/"},"frontmatter":{"title":"Laravel docker prosto","tags":["laravel","docker"],"categories":["php"]}}},{"node":{"excerpt":"Dzisiejszą inspirację stanowi  artykuł , w który często zaglądam przy szybkim deploymencie drupali z jednego środowiska w drugie. Warto zapisać z niego wyciąg, zanim kawałek internetu zniknie. Będziemy pisać komendy, które szybko wymienią nam całe bazy w drupalu. Ominie nas korzystanie z narzędzia mysqldump, nie trzeba pisać tutaj danych logowania, a także uchroni nas przed koniecznością korzystania z czasochłonnych, webowych interfejsów. Aby zrobić backup  drush sql-dump > ~/bazka.sql Wgrać backup  drush sql-cli < ~/bazka.sql Dropnąć tabele  drush sql-drop Gzipnąć za dużą bazę  gzip -c ~/bazka.sql > ~/bazka.sql.gz No i jaka komenda w drupalu występuje najczęściej ? Każdy to wie: That's all folks! W post scriptumie dla użytkowników chętnych bardziej nadmienię, że jeśli mamy dostęp do roota projektu przez ssh, można po operacji backupu zrzucić bazkę ze zdalnego na swój komputer  scp user@hostip:bazka.sql.gz ~/bazka.sql","id":"8b6997b5-96fc-5242-992c-97af6b930b7f","fields":{"date":"2018-06-12","slug":"/drupal-flavour/"},"frontmatter":{"title":"drush sql","tags":["drupal","drush"],"categories":["php"]}}},{"node":{"excerpt":"Jako generatora dla tego bloga użyłem Sculpin. Dlaczego? Ponieważ lubię PHP, bo proste rzeczy mnie cieszą, bo chcę pisać. W zasadzie każdym narzędziem można pisać. Ba, nawet długopisem, ale dziś Sculpinem. Po przejrzeniu dokumentacji każdy, kto miał do czynienia z composerem będzie w stanie wystartować bloga w minutę. Ale tak naprawdę chcemy publikować na github pages i publikować beztrosko. Załóżmy zatem repozytorium o nazwie naszego użytkownika github. Jeśli jesteś github.com/raul to zakładaj raul.github.io . Jest to wariant, w którym zakładamy github page dla naszego użytkownika. Pozostałe warianty to publikacja strony dla projektu, pod innym adresem, oraz publikacja z katalogu docs. Tym razem chodzi nam o publikację bloga dla użytkownika. Moja propozycja wygląda następująco: robimy dwie gałęzie, np. master i sources. W master trzymajmy to, co wygenerowane, a w sources nasze źródło, jak sama nazwa wskazuje. W tym celu do pliku publish.sh wklejamy następujący kod: Pokrótce: wpisujemy w terminalu  ./publish.sh \"mój mesydż\"  i nasz katalog  output_prod  zostanie wysłany do gałęzi master, co poskutkuje opublikowaniem strony pod adresem  <NASZ_USER>.github.io Blog gotowy! Co jeszcze chciałbym dodać? W Sculpinie jest parę rzeczy do…","id":"2f0d3bbb-6caa-546b-801d-96bafcee01f2","fields":{"date":"2018-06-10","slug":"/hello-github/"},"frontmatter":{"title":"Github Pages na Sculpin","tags":["sculpin","github"],"categories":["php"]}}}]}},"pageContext":{}}